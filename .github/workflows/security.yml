name: Security Checks

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master, main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install pipenv and security tools
      run: |
        python -m pip install --upgrade pip
        pip install pipenv safety bandit semgrep

    - name: Install dependencies
      run: |
        pipenv install --dev --system

    - name: Run Safety check for known vulnerabilities
      run: |
        safety check --json || true

    - name: Run Bandit security linter
      run: |
        bandit -c pyproject.toml -r . -f json -o bandit-report.json || true
        bandit -c pyproject.toml -r . -f txt

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-results
        path: semgrep-report.json

    - name: Check for hardcoded secrets
      run: |
        # Check for common secret patterns
        echo "Checking for hardcoded secrets..."

        # Function to check for hardcoded secrets with safe exclusions
        check_secrets() {
          local pattern="$1"
          local name="$2"

          # Safe patterns to exclude:
          # - Environment variable access: os.getenv, getenv, environ
          # - Django settings access: settings., getattr(settings, ...)
          # - Parameter passing: api_key=api_key, password=password, etc.
          # - Empty/None values: None, '', ""
          if grep -r -i "$pattern" --include="*.py" . | \
             grep -v "test" | \
             grep -v "__pycache__" | \
             grep -v "settings\.py" | \
             grep -v "os\.getenv\|getenv\|environ\|settings\.\|getattr.*settings" | \
             grep -v "api_key=api_key\|password=password\|secret_key=secret_key" | \
             grep -v "None\|''\|\"\"" | \
             grep -v "\.configure.*api_key=api_key"; then
            echo "WARNING: Potential hardcoded $name found!"
            return 1
          fi
          return 0
        }

        # Check for passwords
        if ! check_secrets "password\s*=" "passwords"; then
          exit 1
        fi

        # Check for API keys
        if ! check_secrets "api_key\s*=" "API keys"; then
          exit 1
        fi

        # Check for secret keys
        if ! check_secrets "secret_key\s*=" "secret keys"; then
          exit 1
        fi

        echo "No hardcoded secrets detected."

    - name: Set up PostgreSQL for security checks
      run: |
        sudo systemctl start postgresql.service
        sudo -u postgres createuser --createdb --superuser runner
        createdb security_test

    - name: Check Django security settings
      env:
        SECRET_KEY: "test-super-long-secret-key-with-many-unique-characters-for-github-actions-12345"
        DEBUG: "False"
        ALLOWED_HOSTS: "localhost,127.0.0.1"
        DATABASE_URL: "postgresql://runner@localhost:5432/security_test"
      run: |
        python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'credit_mate_ai.settings')
        import django
        django.setup()
        from django.core.management import call_command
        call_command('check', '--deploy')
        "

    - name: Run pip-audit for dependency vulnerabilities
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Upload pip-audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.json

    - name: Check for SQL injection patterns
      run: |
        echo "Checking for potential SQL injection patterns..."
        if grep -r -i "format.*sql\|%.*sql\|\.execute.*%" --include="*.py" . | grep -v "test" | grep -v "__pycache__"; then
          echo "WARNING: Potential SQL injection patterns found!"
          echo "Please use parameterized queries instead."
          exit 1
        fi
        echo "No SQL injection patterns detected."

    - name: Check for eval() usage
      run: |
        echo "Checking for dangerous eval() usage..."
        if grep -r "eval(" --include="*.py" . | grep -v "test" | grep -v "__pycache__"; then
          echo "WARNING: eval() usage found! This can be dangerous."
          exit 1
        fi
        echo "No eval() usage detected."

    - name: Check for pickle usage
      run: |
        echo "Checking for potentially unsafe pickle usage..."
        if grep -r "pickle\." --include="*.py" . | grep -v "test" | grep -v "__pycache__"; then
          echo "WARNING: pickle usage found! This can be unsafe with untrusted data."
          # Don't fail here as pickle might be used safely
        fi
        echo "Pickle check completed."
